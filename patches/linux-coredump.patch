diff --git a/accel/tcg/cpu-exec.c b/accel/tcg/cpu-exec.c
index 58aea60..2c62811 100644
--- a/accel/tcg/cpu-exec.c
+++ b/accel/tcg/cpu-exec.c
@@ -144,6 +144,33 @@ static void init_delay_params(SyncClocks *sc, const CPUState *cpu)
 #endif /* CONFIG USER ONLY */
 
 /* Execute a TB, and fix up the CPU state afterwards if necessary */
+abi_long core_addr = 0;
+abi_long nth_core_addr_occurrence = 0;
+abi_long core_dumped = 0;
+abi_long core_addr_dumping = 0;
+void qemu_set_core_addr(const char *addr_str)
+{
+    int ret = sscanf(addr_str, "0x" TARGET_FMT_lx ":" TARGET_FMT_lu, &core_addr, &nth_core_addr_occurrence);
+    if(ret != 2) {
+        fprintf(stderr, "Fail to parse coreaddr: '%s', expected {addr:x}:{nth_occurence}\n", addr_str);
+        exit(1);
+    }
+}
+
+abi_long trace_start_addr = 0;
+abi_long nth_start_trace_addr_occurrence = 0;
+static int trace_started = 1;
+void qemu_set_trace_start_addr(const char *addr_str)
+{
+    int ret = sscanf(addr_str, "0x" TARGET_FMT_lx ":" TARGET_FMT_lu, &trace_start_addr, &nth_start_trace_addr_occurrence);
+    if(ret != 2) {
+        fprintf(stderr, "Fail to parse trace_start_addr: '%s', expected {addr:x}:{nth_occurence}\n", addr_str);
+        exit(1);
+    }
+    trace_started = 0;
+}
+
+extern int elf_core_dump(int signr, const CPUArchState *env);
 static inline tcg_target_ulong cpu_tb_exec(CPUState *cpu, TranslationBlock *itb)
 {
     CPUArchState *env = cpu->env_ptr;
@@ -152,12 +179,41 @@ static inline tcg_target_ulong cpu_tb_exec(CPUState *cpu, TranslationBlock *itb)
     int tb_exit;
     uint8_t *tb_ptr = itb->tc.ptr;
 
-    qemu_log_mask_and_addr(CPU_LOG_EXEC, itb->pc,
-                           "Trace %d: %p ["
-                           TARGET_FMT_lx "/" TARGET_FMT_lx "/%#x] %s\n",
-                           cpu->cpu_index, itb->tc.ptr,
-                           itb->cs_base, itb->pc, itb->flags,
-                           lookup_symbol(itb->pc));
+    // decide whether to start tracing
+    if(unlikely(trace_start_addr != 0 && trace_started == 0)) {
+        if(unlikely(trace_start_addr >= itb->pc && trace_start_addr < itb->pc + itb->size))
+        {
+            if (nth_start_trace_addr_occurrence) {
+                nth_start_trace_addr_occurrence -= 1;
+            }
+            if (!nth_start_trace_addr_occurrence)
+            {
+                trace_started = 1;
+            }
+        }
+    }
+
+    if(trace_started) {
+        qemu_log_mask_and_addr(CPU_LOG_EXEC, itb->pc,
+                               "Trace %d: %p ["
+                               TARGET_FMT_lx "/" TARGET_FMT_lx "/%#x] %s\n",
+                               cpu->cpu_index, itb->tc.ptr,
+                               itb->cs_base, itb->pc, itb->flags,
+                               lookup_symbol(itb->pc));
+    }
+
+    if(unlikely(core_dumped == 0 && core_addr >= itb->pc && core_addr < itb->pc + itb->size)) {
+        if (nth_core_addr_occurrence) {
+            nth_core_addr_occurrence -= 1;
+        }
+        if (!nth_core_addr_occurrence)
+        {
+			core_addr_dumping = 1;
+            elf_core_dump(SIGKILL, env);
+			core_addr_dumping = 0;
+            core_dumped = 1;
+        }
+    }
 
 #if defined(DEBUG_DISAS)
     if (qemu_loglevel_mask(CPU_LOG_TB_CPU)
diff --git a/include/elf.h b/include/elf.h
index 7a418ee..a539160 100644
--- a/include/elf.h
+++ b/include/elf.h
@@ -1645,6 +1645,7 @@ typedef struct elf64_shdr {
 #define NT_TASKSTRUCT	4
 #define NT_AUXV		6
 #define NT_PRXFPREG     0x46e62b7f      /* copied from gdb5.1/include/elf/common.h */
+#define NT_FILE     0x46494c45          /* copied from gdb5.1/include/elf/common.h */
 #define NT_S390_GS_CB   0x30b           /* s390 guarded storage registers */
 #define NT_S390_VXRS_HIGH 0x30a         /* s390 vector registers 16-31 */
 #define NT_S390_VXRS_LOW  0x309         /* s390 vector registers 0-15 (lower half) */
diff --git a/include/exec/log.h b/include/exec/log.h
index e02fff5..ca00f34 100644
--- a/include/exec/log.h
+++ b/include/exec/log.h
@@ -13,6 +13,10 @@
  *
  * Logs the output of cpu_dump_state().
  */
+
+void qemu_set_core_addr(const char *addr_str);
+void qemu_set_trace_start_addr(const char *addr_str);
+
 static inline void log_cpu_state(CPUState *cpu, int flags)
 {
     QemuLogFile *logfile;
diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index 0b02a92..7cb872f 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -1,6 +1,8 @@
 /* This is the Linux kernel elf-loading code, ported into user space */
 #include "qemu/osdep.h"
 #include <sys/param.h>
+#include <sys/types.h>
+#include <sys/stat.h>
 
 #include <sys/resource.h>
 #include <sys/shm.h>
@@ -1669,7 +1671,7 @@ static inline void bswap_mips_abiflags(Mips_elf_abiflags_v0 *abiflags) { }
 #endif
 
 #ifdef USE_ELF_CORE_DUMP
-static int elf_core_dump(int, const CPUArchState *);
+int elf_core_dump(int, const CPUArchState *);
 #endif /* USE_ELF_CORE_DUMP */
 static void load_symbols(struct elfhdr *hdr, int fd, abi_ulong load_bias);
 
@@ -3288,6 +3290,13 @@ struct target_elf_prpsinfo {
     char    pr_psargs[ELF_PRARGSZ]; /* initial part of arg list */
 };
 
+struct target_ntfile_entry {
+    abi_ulong   vm_start;
+    abi_ulong   vm_end;
+    abi_ulong   page_offset;
+    char        *path;
+};
+
 /* Here is the structure in which status of each thread is captured. */
 struct elf_thread_status {
     QTAILQ_ENTRY(elf_thread_status)  ets_link;
@@ -3648,6 +3657,118 @@ static void fill_auxv_note(struct memelfnote *note, const TaskState *ts)
     }
 }
 
+static void fill_ntfile_note(struct memelfnote *note, TaskState *ts)
+{
+    FILE *fp;
+    char *line = NULL;
+    size_t len = 0;
+    ssize_t read;
+    int count = 0;
+    int data_size = sizeof(abi_long)*2; // reserve space for num_map_entry and page_size
+    struct target_ntfile_entry *entries = NULL;
+
+    fp = fopen("/proc/self/maps", "r");
+    if (fp == NULL) {
+        return;
+    }
+
+    // grab memory mapping first
+    while ((read = getline(&line, &len, fp)) != -1) {
+        int fields, dev_maj, dev_min, inode;
+        uint64_t min, max, offset;
+        char flag_r, flag_w, flag_x, flag_p;
+        char path[512] = "";
+        fields = sscanf(line, "%"PRIx64"-%"PRIx64" %c%c%c%c %"PRIx64" %x:%x %d"
+                        " %512s", &min, &max, &flag_r, &flag_w, &flag_x,
+                        &flag_p, &offset, &dev_maj, &dev_min, &inode, path);
+
+        if ((fields < 10) || (fields > 11)) {
+            continue;
+        }
+        if (h2g_valid(min)) {
+            int flags = page_get_flags(h2g(min));
+            max = h2g_valid(max - 1) ? max : (uintptr_t)g2h(GUEST_ADDR_MAX) + 1;
+            if (page_check_range(h2g(min), max - min, flags) == -1) {
+                continue;
+            }
+            if (h2g(min) == ts->info->stack_limit) {
+                strcpy(path, "      [stack]");
+            }
+            // NT_FILE requires the mapping to be backed by a file
+            if (access(path, F_OK) != 0) continue;
+
+            count++;
+            entries = realloc(entries, sizeof(struct target_ntfile_entry)*count);
+            struct target_ntfile_entry *entry = &entries[count-1];
+            memset(entry, 0, sizeof(*entry));
+
+            data_size += sizeof(abi_long)*3 + strlen(path) + 1;
+            entry->vm_start = h2g(min);
+            entry->vm_end = h2g(max - 1) + 1;
+            entry->page_offset = offset / TARGET_PAGE_SIZE;
+            entry->path = strdup(path);
+        }
+    }
+
+    // prepare the memory mapping in NT_FILE format
+    char *ptr;
+    int idx = 0;
+    ptr = (char *)g_malloc0(data_size);
+    abi_long *long_ptr = (abi_long *)ptr;
+
+    // memory mappings
+#ifdef BSWAP_NEEDED
+    long_ptr[idx++] = tswapl(count);    // number of map entries
+    long_ptr[idx++] = tswapl(TARGET_PAGE_SIZE);   // target page size
+    for(int i=0; i<count; i++) {
+        struct target_ntfile_entry *entry = &entries[i];
+        long_ptr[idx++] = tswapl(entry->vm_start);
+        long_ptr[idx++] = tswapl(entry->vm_end);
+        long_ptr[idx++] = tswapl(entry->page_offset);
+    }
+#else
+    long_ptr[idx++] = count;    // number of map entries
+    long_ptr[idx++] = TARGET_PAGE_SIZE;   // target page size
+    for(int i=0; i<count; i++) {
+        struct target_ntfile_entry *entry = &entries[i];
+        long_ptr[idx++] = entry->vm_start;
+        long_ptr[idx++] = entry->vm_end;
+        long_ptr[idx++] = entry->page_offset;
+    }
+#endif
+
+    // path names
+    idx *= sizeof(abi_long);
+    for(int i=0; i<count; i++) {
+        struct target_ntfile_entry *entry = &entries[i];
+        int path_size = strlen(entry->path);
+        strcpy(&ptr[idx], entry->path);
+        idx += path_size + 1;
+        free(entry->path);
+    }
+
+    // write it out
+    fill_note(note, "CORE", NT_FILE, data_size, ptr);
+
+    // cleanup
+    free(entries);
+    free(line);
+    fclose(fp);
+}
+
+const char *coredump_prefix = ".";
+void qemu_set_core_dump_prefix(const char *prefix)
+{
+    struct stat path_stat;
+    char* path = NULL;
+
+    if (stat(prefix, &path_stat) != 0) return;
+    if (!S_ISDIR(path_stat.st_mode)) return;
+
+    path = (char *)malloc(PATH_MAX+1);
+    coredump_prefix = realpath(prefix, path);
+}
+
 /*
  * Constructs name of coredump file.  We have following convention
  * for the name:
@@ -3655,6 +3776,7 @@ static void fill_auxv_note(struct memelfnote *note, const TaskState *ts)
  *
  * Returns 0 in case of success, -1 otherwise (errno is set).
  */
+extern int core_addr_dumping;
 static int core_dump_filename(const TaskState *ts, char *buf,
                               size_t bufsize)
 {
@@ -3674,8 +3796,14 @@ static int core_dump_filename(const TaskState *ts, char *buf,
     base_filename = g_path_get_basename(ts->bprm->filename);
     (void) strftime(timestamp, sizeof (timestamp), "%Y%m%d-%H%M%S",
                     localtime_r(&tv.tv_sec, &tm));
-    (void) snprintf(buf, bufsize, "qemu_%s_%s_%d.core",
-                    base_filename, timestamp, (int)getpid());
+    if(core_addr_dumping) {
+        (void) snprintf(buf, bufsize, "%s/qemu_%s_%s_%d_%s.core", coredump_prefix,
+                        base_filename, timestamp, (int)getpid(), "coreaddr");
+    }
+    else{
+        (void) snprintf(buf, bufsize, "%s/qemu_%s_%s_%d_%s.core", coredump_prefix,
+                        base_filename, timestamp, (int)getpid(), "crash");
+    }
     g_free(base_filename);
 
     return (0);
@@ -3685,27 +3813,28 @@ static int dump_write(int fd, const void *ptr, size_t size)
 {
     const char *bufp = (const char *)ptr;
     ssize_t bytes_written, bytes_left;
-    struct rlimit dumpsize;
-    off_t pos;
+    //struct rlimit dumpsize;
+    //off_t pos;
 
     bytes_written = 0;
-    getrlimit(RLIMIT_CORE, &dumpsize);
-    if ((pos = lseek(fd, 0, SEEK_CUR))==-1) {
-        if (errno == ESPIPE) { /* not a seekable stream */
-            bytes_left = size;
-        } else {
-            return pos;
-        }
-    } else {
-        if (dumpsize.rlim_cur <= pos) {
-            return -1;
-        } else if (dumpsize.rlim_cur == RLIM_INFINITY) {
-            bytes_left = size;
-        } else {
-            size_t limit_left=dumpsize.rlim_cur - pos;
-            bytes_left = limit_left >= size ? size : limit_left ;
-        }
-    }
+    bytes_left = size;
+    //getrlimit(RLIMIT_CORE, &dumpsize);
+    //if ((pos = lseek(fd, 0, SEEK_CUR))==-1) {
+    //    if (errno == ESPIPE) { /* not a seekable stream */
+    //        bytes_left = size;
+    //    } else {
+    //        return pos;
+    //    }
+    //} else {
+    //    if (dumpsize.rlim_cur <= pos) {
+    //        return -1;
+    //    } else if (dumpsize.rlim_cur == RLIM_INFINITY) {
+    //        bytes_left = size;
+    //    } else {
+    //        size_t limit_left=dumpsize.rlim_cur - pos;
+    //        bytes_left = limit_left >= size ? size : limit_left ;
+    //    }
+    //}
 
     /*
      * In normal conditions, single write(2) should do but
@@ -3778,7 +3907,7 @@ static void init_note_info(struct elf_note_info *info)
 static int fill_note_info(struct elf_note_info *info,
                           long signr, const CPUArchState *env)
 {
-#define NUMNOTES 3
+#define NUMNOTES 4
     CPUState *cpu = env_cpu((CPUArchState *)env);
     TaskState *ts = (TaskState *)cpu->opaque;
     int i;
@@ -3795,7 +3924,7 @@ static int fill_note_info(struct elf_note_info *info,
 
     /*
      * First fill in status (and registers) of current thread
-     * including process info & aux vector.
+     * including process info, aux vector & memory mapping.
      */
     fill_prstatus(info->prstatus, ts, signr);
     elf_core_copy_regs(&info->prstatus->pr_reg, env);
@@ -3805,7 +3934,8 @@ static int fill_note_info(struct elf_note_info *info,
     fill_note(&info->notes[1], "CORE", NT_PRPSINFO,
               sizeof (*info->psinfo), info->psinfo);
     fill_auxv_note(&info->notes[2], ts);
-    info->numnote = 3;
+    fill_ntfile_note(&info->notes[3], ts);
+    info->numnote = NUMNOTES;
 
     info->notes_size = 0;
     for (i = 0; i < info->numnote; i++)
@@ -3901,7 +4031,7 @@ static int write_note_info(struct elf_note_info *info, int fd)
  * handler (provided that target process haven't registered
  * handler for that) that does the dump when signal is received.
  */
-static int elf_core_dump(int signr, const CPUArchState *env)
+int elf_core_dump(int signr, const CPUArchState *env)
 {
     const CPUState *cpu = env_cpu((CPUArchState *)env);
     const TaskState *ts = (const TaskState *)cpu->opaque;
diff --git a/linux-user/main.c b/linux-user/main.c
index 24d1eb7..e2c8f6e 100644
--- a/linux-user/main.c
+++ b/linux-user/main.c
@@ -289,6 +289,43 @@ static void handle_arg_stack_size(const char *arg)
     }
 }
 
+static void handle_arg_core(const char *arg)
+{
+    qemu_set_core_dump_prefix(arg);
+}
+
+static void handle_arg_core_addr(const char *arg)
+{
+    qemu_set_core_addr(arg);
+}
+
+static void handle_arg_trace_start_addr(const char *arg)
+{
+    qemu_set_trace_start_addr(arg);
+}
+
+static void handle_arg_read_marker(const char *arg)
+{
+    qemu_set_read_marker(arg);
+}
+
+#ifdef GREENHOUSE
+static void handle_arg_execve(const char *arg)
+{
+    qemu_set_execve_path(arg);
+}
+
+static void handle_arg_hackproc(const char *arg)
+{
+    qemu_set_hackproc(arg);
+}
+
+static void handle_arg_hackbind(const char *arg)
+{
+    qemu_set_hackbind(arg);
+}
+#endif
+
 static void handle_arg_ld_prefix(const char *arg)
 {
     interp_prefix = strdup(arg);
@@ -423,8 +460,24 @@ static const struct qemu_argument arg_table[] = {
      "",           ""},
     {"g",          "QEMU_GDB",         true,  handle_arg_gdb,
      "port",       "wait gdb connection to 'port'"},
+    {"C",          "QEMU_CORE_PREFIX", true,  handle_arg_core,
+     "path",       "set coredump path prefix to 'path' (default '.')"},
+    {"A",          "QEMU_CORE_ADDR",   true,  handle_arg_core_addr,
+     "coreaddr",   "generate a core dump at 'coreaddr':'num_occurence' (ex. -A 0x400848:3 => the 3rd occurrence of 0x400848)"},
+    {"T",          "QEMU_TRACE_START_ADDR",   true,  handle_arg_trace_start_addr,
+     "tracestart", "start tracing after tracestart address"},
     {"L",          "QEMU_LD_PREFIX",   true,  handle_arg_ld_prefix,
      "path",       "set the elf interpreter prefix to 'path'"},
+    {"M",          "READ_MARKER",      true,  handle_arg_read_marker,
+     "marker",     "record the last fd that QEMU receives the marker, the marker is in hex format (ex. -M 41424344 )"},
+#ifdef GREENHOUSE
+    {"hackbind",   "QEMU_HACKBIND",    false,   handle_arg_hackbind,
+     "",           "use hack to get around ipv6 addrs and conflicting binds"},
+    {"hackproc",   "QEMU_HACKPROC",    false,   handle_arg_hackproc,
+     "",           "use hack to get around needing to mount a writable /proc"},
+    {"execve",     "QEMU_EXECVE",      true,   handle_arg_execve,
+     "path",       "use interpreter at 'path' when a process calls execve()"},
+#endif
     {"s",          "QEMU_STACK_SIZE",  true,  handle_arg_stack_size,
      "size",       "set the stack size to 'size' bytes"},
     {"cpu",        "QEMU_CPU",         true,  handle_arg_cpu,
diff --git a/linux-user/qemu.h b/linux-user/qemu.h
index 534753c..03a24c0 100644
--- a/linux-user/qemu.h
+++ b/linux-user/qemu.h
@@ -225,6 +225,8 @@ int info_is_fdpic(struct image_info *info);
 uint32_t get_elf_eflags(int fd);
 int load_elf_binary(struct linux_binprm *bprm, struct image_info *info);
 int load_flt_binary(struct linux_binprm *bprm, struct image_info *info);
+void qemu_set_core_dump_prefix(const char *prefix);
+void qemu_set_read_marker(const char *args);
 
 abi_long memcpy_to_target(abi_ulong dest, const void *src,
                           unsigned long len);
@@ -402,6 +404,11 @@ extern long safe_syscall_base(int *pending, long number, ...);
 
 /* syscall.c */
 int host_to_target_waitstatus(int status);
+#ifdef GREENHOUSE
+void qemu_set_hackbind(const char *arg);
+void qemu_set_hackproc(const char *arg);
+void qemu_set_execve_path(const char *path);
+#endif
 
 /* strace.c */
 void print_syscall(void *cpu_env, int num,
diff --git a/linux-user/signal.c b/linux-user/signal.c
index 73de934..57fa7a6 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -619,14 +619,18 @@ void force_sigsegv(int oldsig)
 
 #endif
 
+extern int last_rm_fd;
+void QEMU_NORETURN dump_core_and_abort(int target_sig);
 /* abort execution with signal */
-static void QEMU_NORETURN dump_core_and_abort(int target_sig)
+void QEMU_NORETURN dump_core_and_abort(int target_sig)
 {
     CPUState *cpu = thread_cpu;
     CPUArchState *env = cpu->env_ptr;
     TaskState *ts = (TaskState *)cpu->opaque;
     int host_sig, core_dumped = 0;
     struct sigaction act;
+    target_ulong cs_base, pc;
+    uint32_t flags;
 
     host_sig = target_to_host_signal(target_sig);
     trace_user_force_sig(env, target_sig, host_sig);
@@ -645,10 +649,15 @@ static void QEMU_NORETURN dump_core_and_abort(int target_sig)
         getrlimit(RLIMIT_CORE, &nodump);
         nodump.rlim_cur=0;
         setrlimit(RLIMIT_CORE, &nodump);
-        (void) fprintf(stderr, "qemu: uncaught target signal %d (%s) - %s\n",
-            target_sig, strsignal(host_sig), "core dumped" );
     }
 
+    qemu_log("qemu: last read marker was read through fd: [%d]\n", last_rm_fd);
+
+    cpu_get_tb_cpu_state(env, &pc, &cs_base, &flags);
+    qemu_log("qemu: uncaught target signal %d (%s) - %s [%0*llx]\n",
+             target_sig, strsignal(host_sig), "core dumped",
+             (int)sizeof(target_ulong)*2, (unsigned long long)pc);
+
     /* The proper exit code for dying from an uncaught signal is
      * -<signal>.  The kernel doesn't allow exit() or _exit() to pass
      * a negative value.  To get the proper exit code we need to
diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index 27adee9..4331db0 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -130,10 +130,20 @@
 #include "fd-trans.h"
 #include "tcg/tcg.h"
 
+#ifdef GREENHOUSE
+int used_ports[512] = {0};
+int ports_index = 0;
+bool hackbind = false;
+bool hackproc = false;
+char *qemu_execve_path;
+#endif
+
 #ifndef CLONE_IO
 #define CLONE_IO                0x80000000      /* Clone io context */
 #endif
 
+#define BINPRM_BUF_SIZE 128
+
 /* We can't directly call the host clone syscall, because this will
  * badly confuse libc (breaking mutexes, for example). So we must
  * divide clone flags into:
@@ -864,6 +874,22 @@ static abi_ulong target_brk;
 static abi_ulong target_original_brk;
 static abi_ulong brk_page;
 
+#ifdef GREENHOUSE
+void qemu_set_hackbind(const char *arg) {
+    hackbind = true;
+}
+
+void qemu_set_hackproc(const char *arg) {
+    hackproc = true;
+}
+
+void qemu_set_execve_path(const char *path)
+{
+    qemu_execve_path = strdup(path);
+}
+#endif
+
+
 void target_set_brk(abi_ulong new_brk)
 {
     target_original_brk = target_brk = HOST_PAGE_ALIGN(new_brk);
@@ -3231,6 +3257,13 @@ static abi_long do_socket(int domain, int type, int protocol)
         return -TARGET_EPROTONOSUPPORT;
     }
 
+#ifdef GREENHOUSE
+    if (hackbind && domain == AF_INET6) {
+        // handle all ipv6 networking as ipv4
+        domain = AF_INET;
+    }
+#endif
+
     if (domain == AF_PACKET ||
         (domain == AF_INET && type == SOCK_PACKET)) {
         protocol = tswap16(protocol);
@@ -3271,6 +3304,12 @@ static abi_long do_bind(int sockfd, abi_ulong target_addr,
 {
     void *addr;
     abi_long ret;
+#ifdef GREENHOUSE
+    char ip[INET6_ADDRSTRLEN+1] = "";
+    unsigned short port = 0, newport = 0;
+    unsigned short reuse = 0, retries = 0;
+    void* cust_addr = 0;
+#endif
 
     if ((int)addrlen < 0) {
         return -TARGET_EINVAL;
@@ -3282,7 +3321,75 @@ static abi_long do_bind(int sockfd, abi_ulong target_addr,
     if (ret)
         return ret;
 
+#ifdef GREENHOUSE
+    if (hackbind) {
+        if(((struct sockaddr*)addr)->sa_family == AF_INET) {
+            inet_ntop(AF_INET, &((struct sockaddr_in*)addr)->sin_addr, ip, sizeof(ip));
+            port = ntohs(((struct sockaddr_in*)addr)->sin_port);
+        }
+        else if (((struct sockaddr*)addr)->sa_family == AF_INET6) {
+            cust_addr = alloca(sizeof(struct sockaddr_in));
+            // forces a ipv6 bind address to ipv4
+            port = ntohs(((struct sockaddr_in6*)addr)->sin6_port);
+            memset(((struct sockaddr_in*)cust_addr), 0, sizeof(struct sockaddr_in));
+
+            fprintf(stderr, "[qemu] Using custom bind, forcing ipv6 protocol to ipv4 on addr 0.0.0.0 port %d\n", port);
+            inet_pton(AF_INET, "0.0.0.0", &((struct sockaddr_in*)cust_addr)->sin_addr);
+            inet_ntop(AF_INET, &((struct sockaddr_in*)cust_addr)->sin_addr, ip, sizeof(ip));
+            ((struct sockaddr_in*)cust_addr)->sin_port = htons(port);
+            ((struct sockaddr_in*)cust_addr)->sin_family = AF_INET;
+            addr = cust_addr;
+            addrlen = sizeof(struct sockaddr_in);
+        }
+
+        newport = port;
+        retries = 0;
+         // keep trying different ports until we get a successful bind or exceed retries
+        while (retries < 3) {
+            fprintf(stderr, "[qemu] Trying ip: %s on sockfd %d\n", ip, sockfd);
+            ret = get_errno(bind(sockfd, addr, addrlen));
+            if (!ret) {
+                fprintf(stderr, "[qemu] Successful Bind %d\n", (int)ret);
+                used_ports[ports_index] = newport;
+                ports_index = ports_index + 1;
+                return ret;
+            }
+            if (newport <= 0) {
+                if (((struct sockaddr*)addr)->sa_family == AF_INET6 || ((struct sockaddr*)addr)->sa_family == AF_INET) {
+                    fprintf(stderr, "[qemu] Forcing port %d to 80 and retrying...", newport);
+                    newport = 80;
+                }
+            }
+            else {
+                newport = newport + 1;
+                while(1) {
+                    reuse = 0;
+                    for (int i = 0; i < ports_index; i++) {
+                        if (newport == used_ports[i]) {
+                            newport = newport + 1;
+                            reuse = 1;
+                            break;
+                        }
+                    }
+                    if(reuse == 0) {
+                        break;
+                    }
+                }
+                fprintf(stderr, "[qemu] bind failed, retrying with port %d\n", newport);
+                retries = retries + 1;
+            }
+
+            ((struct sockaddr_in*)addr)->sin_port = htons(newport);
+        }
+    }
+    else {
+        ret = get_errno(bind(sockfd, addr, addrlen));
+    }
+
+    return ret;
+#else
     return get_errno(bind(sockfd, addr, addrlen));
+#endif
 }
 
 /* do_connect() Must return target values and target errnos. */
@@ -3639,6 +3746,20 @@ fail:
     return ret;
 }
 
+int last_rm_fd = -1;
+char read_marker[0x200];
+int rm_len = 0;
+void qemu_set_read_marker(const char *arg)
+{
+	int arg_len = strlen(arg);
+	if (arg_len/2 >= (sizeof(read_marker)-1)) {
+		puts("read marker is too long");
+		exit(-1);
+	}
+	for(int i=0; i<arg_len/2; i++) sscanf(&arg[2*i], "%2hhx", &read_marker[i]);
+	rm_len = arg_len/2;
+}
+
 /* do_recvfrom() Must return target values and target errnos. */
 static abi_long do_recvfrom(int fd, abi_ulong msg, size_t len, int flags,
                             abi_ulong target_addr,
@@ -3687,6 +3808,9 @@ static abi_long do_recvfrom(int fd, abi_ulong msg, size_t len, int flags,
                 goto fail;
             }
         }
+        if(memmem(host_msg, len, read_marker, rm_len)) {
+            last_rm_fd = fd;
+        }
         unlock_user(host_msg, msg, len);
     } else {
 fail:
@@ -8025,6 +8149,30 @@ static int do_openat(void *cpu_env, int dirfd, const char *pathname, int flags,
 #endif
         { NULL, NULL, NULL }
     };
+#ifdef GREENHOUSE
+    char* result;
+    char rpath[PATH_MAX+1];
+    char redirected_path[PATH_MAX+1];
+    memset(rpath, 0, sizeof(rpath));
+    memset(redirected_path, 0, sizeof(redirected_path));
+
+    if (hackproc) {
+        result = realpath(pathname, rpath);
+        if (result == NULL) {
+            snprintf(rpath, PATH_MAX, "%s", pathname);
+        }
+        if (strncmp(rpath, "/proc/", 6) == 0) {
+            snprintf(redirected_path, PATH_MAX, "/ghproc/%s", rpath+6);
+            fprintf(stderr, "[qemu] hackproc - changing %s to %s\n", rpath, redirected_path);
+            pathname = redirected_path;
+        }
+        else if (strncmp(rpath, "/dev/", 5) == 0) {
+            snprintf(redirected_path, PATH_MAX, "/ghdev/%s", rpath+5);
+            fprintf(stderr, "[qemu] hackdev - changing %s to %s\n", rpath, redirected_path);
+            pathname = redirected_path;
+        }
+    }
+#endif
 
     if (is_proc_myself(pathname, "exe")) {
         int execfd = qemu_getauxval(AT_EXECFD);
@@ -8155,6 +8303,150 @@ static int host_to_target_cpu_mask(const unsigned long *host_mask,
     return 0;
 }
 
+#ifdef GREENHOUSE
+/* qemu_execve() Must return target values and target errnos. */
+static abi_long qemu_execve(char *filename, char *argv[],
+                  char *envp[])
+{
+    char *i_arg = NULL, *i_name = NULL;
+    char **new_argp;
+    int argc, fd, ret, i, offset = 3;
+    int tokCount = 0;
+    char *cp;
+    char *token;
+    char *qemu_path_tokens;
+    char *qemu_path;
+    char buf[BINPRM_BUF_SIZE];
+
+    fprintf(stderr, "[qemu] doing qemu_execven on filename %s\n", filename);
+    memset(buf, 0, BINPRM_BUF_SIZE);
+
+
+    for (argc = 0; argv[argc] != NULL; argc++) {
+        /* nothing */ ;
+        // fprintf(stderr, "   - arg %s\n", argv[argc]);
+    }
+
+    fd = open(filename, O_RDONLY);
+    if (fd == -1) {
+        // fprintf(stderr, "   - ERR1 %d\n", -ENOENT);
+        return -ENOENT;
+    }
+
+    ret = read(fd, buf, BINPRM_BUF_SIZE);
+    if (ret == -1) {
+        close(fd);
+        // fprintf(stderr, "   - ERR2 %d\n", -ENOENT);
+        return -ENOENT;
+    }
+
+    close(fd);
+
+    /* adapted from the kernel
+     * https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/binfmt_script.c
+     */
+    if ((buf[0] == '#') && (buf[1] == '!')) {
+        /*
+         * This section does the #! interpretation.
+         * Sorta complicated, but hopefully it will work.  -TYT
+         */
+
+        buf[BINPRM_BUF_SIZE - 1] = '\0';
+        cp = strchr(buf, '\n');
+        if (cp == NULL) {
+            cp = buf+BINPRM_BUF_SIZE-1;
+        }
+        *cp = '\0';
+        while (cp > buf) {
+            cp--;
+            if ((*cp == ' ') || (*cp == '\t')) {
+                *cp = '\0';
+            } else {
+                break;
+            }
+        }
+        for (cp = buf+2; (*cp == ' ') || (*cp == '\t'); cp++) {
+            /* nothing */ ;
+        }
+        if (*cp == '\0') {
+            return -ENOEXEC; /* No interpreter name found */
+        }
+        i_name = cp;
+        i_arg = NULL;
+        for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
+            /* nothing */ ;
+        }
+        while ((*cp == ' ') || (*cp == '\t')) {
+            *cp++ = '\0';
+        }
+        if (*cp) {
+            i_arg = cp;
+        }
+
+        if (i_arg) {
+            offset = 5;
+        } else {
+            offset = 4;
+        }
+    }
+
+    qemu_path_tokens = strdup(qemu_execve_path);
+    token = strtok(qemu_path_tokens, " ");
+    qemu_path = strdup(token);
+    token = strtok(NULL, " ");
+    while (token != NULL) {
+        token = strtok(NULL, " ");
+        tokCount += 1;
+    }
+    offset += 2 + tokCount;
+
+    new_argp = alloca((argc + offset + 1) * sizeof(void *));
+    /* Copy the original arguments with offset */
+    for (i = 0; i < argc; i++) {
+        // fprintf(stderr, "   - argv %s\n", argv[i]);
+        new_argp[i + offset] = strdup(argv[i]);
+    }
+
+    new_argp[0] = strdup(qemu_path);
+    new_argp[1] = strdup("-0");
+
+    if (i_name) {
+        new_argp[2] = i_name;
+        offset -= 1; // iname is 2nd and 2nd last arg
+
+    } else {
+        new_argp[2] = argv[0];
+    }
+
+
+    qemu_path_tokens = strdup(qemu_execve_path);
+    token = strtok(qemu_path_tokens, " ");
+    while (tokCount > 0 && token != NULL) {
+        token = strtok(NULL, " ");
+        new_argp[offset - 2 - tokCount] = strdup(token);
+        tokCount -= 1;
+    }
+
+    new_argp[offset - 2] = strdup("-execve");
+    new_argp[offset - 1] = strdup(qemu_execve_path);
+
+    if (i_name) {
+        offset += 1; // iname is 2nd and 2nd last arg
+        new_argp[offset - 1] = i_name;
+
+        if (i_arg) {
+            new_argp[offset - 2] = i_name;
+            new_argp[offset - 1] = i_arg;
+        }
+    }
+
+    new_argp[offset] = filename;
+    new_argp[argc + offset] = NULL;
+
+    return get_errno(execve(qemu_path, new_argp, envp));
+}
+#endif
+
 /* This is an internal helper for do_syscall so that it is easier
  * to have a single return point, so that actions, such as logging
  * of syscall results, can be performed.
@@ -8227,6 +8519,11 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
             if (!(p = lock_user(VERIFY_WRITE, arg2, arg3, 0)))
                 return -TARGET_EFAULT;
             ret = get_errno(safe_read(arg1, p, arg3));
+            if (ret >= 0) {
+                if(memmem(p, ret, read_marker, rm_len)) {
+                    last_rm_fd = arg1;
+                }
+            }
             if (ret >= 0 &&
                 fd_trans_host_to_target_data(arg1)) {
                 ret = fd_trans_host_to_target_data(arg1)(p, ret);
@@ -8447,7 +8744,17 @@ static abi_long do_syscall1(void *cpu_env, int num, abi_long arg1,
              * before the execve completes and makes it the other
              * program's problem.
              */
+            // ret = get_errno(safe_execve(p, argp, envp));
+#ifdef GREENHOUSE
+            if (qemu_execve_path && *qemu_execve_path) {
+                ret = get_errno(qemu_execve(p, argp, envp));
+            }
+            else {
+                ret = get_errno(safe_execve(p, argp, envp));
+            }
+#else
             ret = get_errno(safe_execve(p, argp, envp));
+#endif
             unlock_user(p, arg1, 0);
 
             goto execve_end;
diff --git a/target/mips/translate.c b/target/mips/translate.c
index c64a1bc..449d2a1 100644
--- a/target/mips/translate.c
+++ b/target/mips/translate.c
@@ -31542,9 +31542,9 @@ static void mips_tr_translate_insn(DisasContextBase *dcbase, CPUState *cs)
         (ctx->hflags & MIPS_HFLAG_BMASK) == 0) {
         ctx->base.is_jmp = DISAS_TOO_MANY;
     }
-    if (ctx->base.pc_next - ctx->page_start >= TARGET_PAGE_SIZE) {
-        ctx->base.is_jmp = DISAS_TOO_MANY;
-    }
+//    if (ctx->base.pc_next - ctx->page_start >= TARGET_PAGE_SIZE) {
+//        ctx->base.is_jmp = DISAS_TOO_MANY;
+//    }
 }
 
 static void mips_tr_tb_stop(DisasContextBase *dcbase, CPUState *cs)

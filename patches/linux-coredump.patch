diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index 8198be0..8a92c67 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -1,6 +1,8 @@
 /* This is the Linux kernel elf-loading code, ported into user space */
 #include "qemu/osdep.h"
 #include <sys/param.h>
+#include <sys/types.h>
+#include <sys/stat.h>
 
 #include <sys/resource.h>
 #include <sys/shm.h>
@@ -3193,21 +3195,21 @@ static abi_ulong vma_dump_size(const struct vm_area_struct *vma)
      * and check whether it contains elf header.  If there is
      * no elf header, we dump it.
      */
-    if (vma->vma_flags & PROT_EXEC) {
-        char page[TARGET_PAGE_SIZE];
-
-        copy_from_user(page, vma->vma_start, sizeof (page));
-        if ((page[EI_MAG0] == ELFMAG0) &&
-            (page[EI_MAG1] == ELFMAG1) &&
-            (page[EI_MAG2] == ELFMAG2) &&
-            (page[EI_MAG3] == ELFMAG3)) {
-            /*
-             * Mappings are possibly from ELF binary.  Don't dump
-             * them.
-             */
-            return (0);
-        }
-    }
+    // if (vma->vma_flags & PROT_EXEC) {
+    //     char page[TARGET_PAGE_SIZE];
+
+    //     copy_from_user(page, vma->vma_start, sizeof (page));
+    //     if ((page[EI_MAG0] == ELFMAG0) &&
+    //         (page[EI_MAG1] == ELFMAG1) &&
+    //         (page[EI_MAG2] == ELFMAG2) &&
+    //         (page[EI_MAG3] == ELFMAG3)) {
+    //         /*
+    //          * Mappings are possibly from ELF binary.  Don't dump
+    //          * them.
+    //          */
+    //         return (0);
+    //     }
+    // }
 
     return (vma->vma_end - vma->vma_start);
 }
@@ -3357,6 +3359,19 @@ static void fill_auxv_note(struct memelfnote *note, const TaskState *ts)
     }
 }
 
+const char *coredump_prefix = ".";
+void qemu_set_core_dump_prefix(const char *prefix)
+{
+    struct stat path_stat;
+    char* path = NULL;
+
+    if (stat(prefix, &path_stat) != 0) return;
+    if (!S_ISDIR(path_stat.st_mode)) return;
+
+    path = (char *)malloc(PATH_MAX+1);
+    coredump_prefix = realpath(prefix, path);
+}
+
 /*
  * Constructs name of coredump file.  We have following convention
  * for the name:
@@ -3383,7 +3398,7 @@ static int core_dump_filename(const TaskState *ts, char *buf,
     base_filename = g_path_get_basename(ts->bprm->filename);
     (void) strftime(timestamp, sizeof (timestamp), "%Y%m%d-%H%M%S",
                     localtime_r(&tv.tv_sec, &tm));
-    (void) snprintf(buf, bufsize, "qemu_%s_%s_%d.core",
+    (void) snprintf(buf, bufsize, "%s/qemu_%s_%s_%d.core", coredump_prefix,
                     base_filename, timestamp, (int)getpid());
     g_free(base_filename);
 
diff --git a/linux-user/main.c b/linux-user/main.c
index 22578b1..ee5ca09 100644
--- a/linux-user/main.c
+++ b/linux-user/main.c
@@ -288,6 +288,11 @@ static void handle_arg_stack_size(const char *arg)
     }
 }
 
+static void handle_arg_core(const char *arg)
+{
+    qemu_set_core_dump_prefix(arg);
+}
+
 static void handle_arg_ld_prefix(const char *arg)
 {
     interp_prefix = strdup(arg);
@@ -424,6 +429,8 @@ static const struct qemu_argument arg_table[] = {
      "",           ""},
     {"g",          "QEMU_GDB",         true,  handle_arg_gdb,
      "port",       "wait gdb connection to 'port'"},
+    {"C",          "QEMU_CORE_PREFIX", true,  handle_arg_core,
+     "path",       "set coredump path prefix to 'path' (default '.')"},
     {"L",          "QEMU_LD_PREFIX",   true,  handle_arg_ld_prefix,
      "path",       "set the elf interpreter prefix to 'path'"},
     {"s",          "QEMU_STACK_SIZE",  true,  handle_arg_stack_size,
diff --git a/linux-user/qemu.h b/linux-user/qemu.h
index 792c742..f59c86d 100644
--- a/linux-user/qemu.h
+++ b/linux-user/qemu.h
@@ -201,6 +201,7 @@ int info_is_fdpic(struct image_info *info);
 uint32_t get_elf_eflags(int fd);
 int load_elf_binary(struct linux_binprm *bprm, struct image_info *info);
 int load_flt_binary(struct linux_binprm *bprm, struct image_info *info);
+void qemu_set_core_dump_prefix(const char *prefix);
 
 abi_long memcpy_to_target(abi_ulong dest, const void *src,
                           unsigned long len);
diff --git a/linux-user/signal.c b/linux-user/signal.c
index 8cf51ff..3322d2c 100644
--- a/linux-user/signal.c
+++ b/linux-user/signal.c
@@ -627,6 +627,8 @@ static void QEMU_NORETURN dump_core_and_abort(int target_sig)
     TaskState *ts = (TaskState *)cpu->opaque;
     int host_sig, core_dumped = 0;
     struct sigaction act;
+    target_ulong cs_base, pc;
+    uint32_t flags;
 
     host_sig = target_to_host_signal(target_sig);
     trace_user_force_sig(env, target_sig, host_sig);
@@ -649,6 +651,16 @@ static void QEMU_NORETURN dump_core_and_abort(int target_sig)
             target_sig, strsignal(host_sig), "core dumped" );
     }
 
+    cpu_get_tb_cpu_state(env, &pc, &cs_base, &flags);
+    if (sizeof(target_ulong) == 4) {
+        qemu_log("qemu: uncaught target signal %d (%s) - %s [%08x]\n",
+                 target_sig, strsignal(host_sig), "core dumped", (unsigned int)pc);
+    }
+    else if (sizeof(target_ulong) == 8) {
+        qemu_log("qemu: uncaught target signal %d (%s) - %s [%016llx]\n",
+                 target_sig, strsignal(host_sig), "core dumped", (unsigned long long)pc);
+    }
+
     /* The proper exit code for dying from an uncaught signal is
      * -<signal>.  The kernel doesn't allow exit() or _exit() to pass
      * a negative value.  To get the proper exit code we need to
